{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/icon\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/tabs\";\nfunction LoginModalComponent_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function LoginModalComponent_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.form.controls[\"username\"].setValue(\"\"));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginModalComponent_mat_error_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Username should contain from 2 to 30 symbols \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginModalComponent_mat_error_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Username is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginModalComponent_button_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function LoginModalComponent_button_20_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.form.controls[\"email\"].setValue(\"\"));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginModalComponent_mat_error_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginModalComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginModalComponent_button_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function LoginModalComponent_button_27_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.form.controls[\"password\"].setValue(\"\"));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction LoginModalComponent_mat_error_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password should contain from 2 to 30 symbols \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginModalComponent_mat_error_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class LoginModalComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.form = this.formBuilder.group({\n      username: [\"\", [Validators.required, Validators.minLength(2), Validators.maxLength(30)]],\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(2), Validators.maxLength(30)]]\n    });\n  }\n}\nLoginModalComponent.ɵfac = function LoginModalComponent_Factory(t) {\n  return new (t || LoginModalComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nLoginModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginModalComponent,\n  selectors: [[\"app-login-modal\"]],\n  decls: 30,\n  vars: 10,\n  consts: [[1, \"login-modal\"], [\"dynamicHeight\", \"\", \"animationDuration\", \"0ms\", \"mat-stretch-tabs\", \"\", \"backgroundColor\", \"accent\", \"color\", \"accent\"], [\"label\", \"Short tab\"], [1, \"example-small-box\", \"mat-elevation-z4\"], [\"label\", \"Long tab\"], [1, \"example-large-box\", \"mat-elevation-z4\"], [3, \"formGroup\"], [\"type\", \"text\", \"matInput\", \"\", \"formControlName\", \"username\", \"placeholder\", \"Enter your username\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"email\", \"matInput\", \"\", \"formControlName\", \"email\", \"placeholder\", \"Ex. pat@example.com\"], [\"type\", \"password\", \"matInput\", \"\", \"formControlName\", \"password\", \"placeholder\", \"Enter your password\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"]],\n  template: function LoginModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-tab-group\", 1)(2, \"mat-tab\", 2)(3, \"div\", 3);\n      i0.ɵɵtext(4, \"Small content\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"mat-tab\", 4)(6, \"div\", 5);\n      i0.ɵɵtext(7, \"Large content\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(8, \"form\", 6)(9, \"mat-form-field\")(10, \"mat-label\");\n      i0.ɵɵtext(11, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 7);\n      i0.ɵɵtemplate(13, LoginModalComponent_button_13_Template, 3, 0, \"button\", 8);\n      i0.ɵɵtemplate(14, LoginModalComponent_mat_error_14_Template, 2, 0, \"mat-error\", 9);\n      i0.ɵɵtemplate(15, LoginModalComponent_mat_error_15_Template, 4, 0, \"mat-error\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"mat-form-field\")(17, \"mat-label\");\n      i0.ɵɵtext(18, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 10);\n      i0.ɵɵtemplate(20, LoginModalComponent_button_20_Template, 3, 0, \"button\", 8);\n      i0.ɵɵtemplate(21, LoginModalComponent_mat_error_21_Template, 2, 0, \"mat-error\", 9);\n      i0.ɵɵtemplate(22, LoginModalComponent_mat_error_22_Template, 4, 0, \"mat-error\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"mat-form-field\")(24, \"mat-label\");\n      i0.ɵɵtext(25, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"input\", 11);\n      i0.ɵɵtemplate(27, LoginModalComponent_button_27_Template, 3, 0, \"button\", 8);\n      i0.ɵɵtemplate(28, LoginModalComponent_mat_error_28_Template, 2, 0, \"mat-error\", 9);\n      i0.ɵɵtemplate(29, LoginModalComponent_mat_error_29_Template, 4, 0, \"mat-error\", 9);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls[\"username\"].value);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.form.controls[\"username\"].hasError(\"minLength\") || ctx.form.controls[\"username\"].hasError(\"maxLength\")) && !ctx.form.controls[\"username\"].hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls[\"email\"].hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls[\"email\"].value);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls[\"email\"].hasError(\"email\") && !ctx.form.controls[\"email\"].hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls[\"email\"].hasError(\"required\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls[\"password\"].value);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.form.controls[\"password\"].hasError(\"minLength\") || ctx.form.controls[\"password\"].hasError(\"maxLength\")) && !ctx.form.controls[\"password\"].hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.controls[\"password\"].hasError(\"required\"));\n    }\n  },\n  dependencies: [i2.NgIf, i3.MatIcon, i4.MatIconButton, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i5.MatInput, i6.MatFormField, i6.MatLabel, i6.MatError, i6.MatSuffix, i1.FormGroupDirective, i1.FormControlName, i7.MatTab, i7.MatTabGroup],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;ICwB7DC,kCAMC;IADCA;MAAAA;MAAA;MAAA,OAASA,oCAAc,UAAU,WAAW,EAAE,CAAC;IAAA,EAAC;IAEhDA,gCAAU;IAAAA,qBAAK;IAAAA,iBAAW;;;;;IAE5BA,iCAMC;IACCA,8DACF;IAAAA,iBAAY;;;;;IACZA,iCAA+D;IAC7DA,6BAAY;IAAAA,8BAAQ;IAAAA,wBAAQ;IAAAA,iBAAS;;;;;;IAWvCA,kCAMC;IADCA;MAAAA;MAAA;MAAA,OAASA,qCAAc,OAAO,WAAW,EAAE,CAAC;IAAA,EAAC;IAE7CA,gCAAU;IAAAA,qBAAK;IAAAA,iBAAW;;;;;IAE5BA,iCAKC;IACCA,oDACF;IAAAA,iBAAY;;;;;IACZA,iCAA+D;IAC7DA,0BAAS;IAAAA,8BAAQ;IAAAA,wBAAQ;IAAAA,iBAAS;;;;;;IAWpCA,kCAMC;IADCA;MAAAA;MAAA;MAAA,OAASA,qCAAc,UAAU,WAAW,EAAE,CAAC;IAAA,EAAC;IAEhDA,gCAAU;IAAAA,qBAAK;IAAAA,iBAAW;;;;;IAE5BA,iCAMC;IACCA,8DACF;IAAAA,iBAAY;;;;;IACZA,iCAAkE;IAChEA,6BAAY;IAAAA,8BAAQ;IAAAA,wBAAQ;IAAAA,iBAAS;;;AD/F7C,OAAM,MAAOC,mBAAmB;EAa9BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAZ/B,SAAI,GAAc,IAAI,CAACA,WAAW,CAACC,KAAK,CAAC;MACvCC,QAAQ,EAAE,CACR,EAAE,EACF,CAACN,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EAAER,UAAU,CAACS,SAAS,CAAC,EAAE,CAAC,CAAC,CACzE;MACDC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACU,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CACR,EAAE,EACF,CAACX,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EAAER,UAAU,CAACS,SAAS,CAAC,EAAE,CAAC,CAAC;KAE3E,CAAC;EAE6C;;AAbpCP,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAU;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCRhCf,8BAAyB;MAS6BA,6BAAa;MAAAA,iBAAM;MAErEA,kCAA0B;MACwBA,6BAAa;MAAAA,iBAAM;MAIvEA,+BAAyB;MAEVA,yBAAQ;MAAAA,iBAAY;MAC/BA,4BAKE;MACFA,4EAQS;MACTA,kFAQY;MACZA,kFAEY;MACdA,iBAAiB;MACjBA,uCAAgB;MACHA,sBAAK;MAAAA,iBAAY;MAC5BA,6BAKE;MACFA,4EAQS;MACTA,kFAOY;MACZA,kFAEY;MACdA,iBAAiB;MACjBA,uCAAgB;MACHA,yBAAQ;MAAAA,iBAAY;MAC/BA,6BAKE;MACFA,4EAQS;MACTA,kFAQY;MACZA,kFAEY;MACdA,iBAAiB;;;MAzFbA,eAAkB;MAAlBA,oCAAkB;MAUjBA,eAAqC;MAArCA,0DAAqC;MASrCA,eAKT;MALSA,0LAKT;MAGkBA,eAAiD;MAAjDA,sEAAiD;MAa1DA,eAAkC;MAAlCA,uDAAkC;MASlCA,eAIT;MAJSA,uHAIT;MAGkBA,eAAiD;MAAjDA,sEAAiD;MAa1DA,eAAqC;MAArCA,0DAAqC;MASrCA,eAKT;MALSA,0LAKT;MAGkBA,eAAoD;MAApDA,yEAAoD","names":["Validators","i0","LoginModalComponent","constructor","formBuilder","group","username","required","minLength","maxLength","email","password","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\projects\\grocery-delivery-app\\client\\src\\modules\\page-layout\\components\\login-modal\\login-modal.component.ts","D:\\projects\\grocery-delivery-app\\client\\src\\modules\\page-layout\\components\\login-modal\\login-modal.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-login-modal\",\n  templateUrl: \"./login-modal.component.html\",\n  styleUrls: [\"./login-modal.component.scss\"],\n})\nexport class LoginModalComponent {\n  form: FormGroup = this.formBuilder.group({\n    username: [\n      \"\",\n      [Validators.required, Validators.minLength(2), Validators.maxLength(30)],\n    ],\n    email: [\"\", [Validators.required, Validators.email]],\n    password: [\n      \"\",\n      [Validators.required, Validators.minLength(2), Validators.maxLength(30)],\n    ],\n  });\n\n  constructor(private formBuilder: FormBuilder) {}\n}\n","<div class=\"login-modal\">\n  <mat-tab-group\n    dynamicHeight\n    animationDuration=\"0ms\"\n    mat-stretch-tabs\n    backgroundColor=\"accent\"\n    color=\"accent\"\n  >\n    <mat-tab label=\"Short tab\">\n      <div class=\"example-small-box mat-elevation-z4\">Small content</div>\n    </mat-tab>\n    <mat-tab label=\"Long tab\">\n      <div class=\"example-large-box mat-elevation-z4\">Large content</div>\n    </mat-tab>\n  </mat-tab-group>\n\n  <form [formGroup]=\"form\">\n    <mat-form-field>\n      <mat-label>Username</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        formControlName=\"username\"\n        placeholder=\"Enter your username\"\n      />\n      <button\n        *ngIf=\"form.controls['username'].value\"\n        matSuffix\n        mat-icon-button\n        aria-label=\"Clear\"\n        (click)=\"form.controls['username'].setValue('')\"\n      >\n        <mat-icon>close</mat-icon>\n      </button>\n      <mat-error\n        *ngIf=\"\n          (form.controls['username'].hasError('minLength') ||\n            form.controls['username'].hasError('maxLength')) &&\n          !form.controls['username'].hasError('required')\n        \"\n      >\n        Username should contain from 2 to 30 symbols\n      </mat-error>\n      <mat-error *ngIf=\"form.controls['email'].hasError('required')\">\n        Username is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Email</mat-label>\n      <input\n        type=\"email\"\n        matInput\n        formControlName=\"email\"\n        placeholder=\"Ex. pat@example.com\"\n      />\n      <button\n        *ngIf=\"form.controls['email'].value\"\n        matSuffix\n        mat-icon-button\n        aria-label=\"Clear\"\n        (click)=\"form.controls['email'].setValue('')\"\n      >\n        <mat-icon>close</mat-icon>\n      </button>\n      <mat-error\n        *ngIf=\"\n          form.controls['email'].hasError('email') &&\n          !form.controls['email'].hasError('required')\n        \"\n      >\n        Please enter a valid email address\n      </mat-error>\n      <mat-error *ngIf=\"form.controls['email'].hasError('required')\">\n        Email is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Password</mat-label>\n      <input\n        type=\"password\"\n        matInput\n        formControlName=\"password\"\n        placeholder=\"Enter your password\"\n      />\n      <button\n        *ngIf=\"form.controls['password'].value\"\n        matSuffix\n        mat-icon-button\n        aria-label=\"Clear\"\n        (click)=\"form.controls['password'].setValue('')\"\n      >\n        <mat-icon>close</mat-icon>\n      </button>\n      <mat-error\n        *ngIf=\"\n          (form.controls['password'].hasError('minLength') ||\n            form.controls['password'].hasError('maxLength')) &&\n          !form.controls['password'].hasError('required')\n        \"\n      >\n        Password should contain from 2 to 30 symbols\n      </mat-error>\n      <mat-error *ngIf=\"form.controls['password'].hasError('required')\">\n        Password is <strong>required</strong>\n      </mat-error>\n    </mat-form-field>\n  </form>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}