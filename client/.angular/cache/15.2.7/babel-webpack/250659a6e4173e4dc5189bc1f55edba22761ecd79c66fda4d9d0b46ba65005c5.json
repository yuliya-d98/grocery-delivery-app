{"ast":null,"code":"import { HttpErrorResponse, HttpResponse } from \"@angular/common/http\";\nimport { tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptorService {\n  constructor() {}\n  intercept(req, next) {\n    const authReq = req.clone({\n      // headers: req.headers.set(\"Session\", \"123456789\"),\n    });\n    return next.handle(authReq).pipe(tap(event => {\n      if (event instanceof HttpResponse) console.log(\"Server response\");\n    }, err => {\n      if (err instanceof HttpErrorResponse) {\n        if (err.status == 401) console.log(\"Unauthorized\");\n      }\n    }));\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)();\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SACEA,iBAAiB,EAKjBC,YAAY,QACP,sBAAsB;AAC7B,SAAqBC,GAAG,QAAQ,MAAM;;AAGtC,OAAM,MAAOC,sBAAsB;EACjCC,eAAe;EACfC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,MAAMC,OAAO,GAAGF,GAAG,CAACG,KAAK,CAAC;MACxB;IAAA,CACD,CAAC;IAEF,OAAOF,IAAI,CAACG,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BT,GAAG,CACAU,KAAK,IAAI;MACR,IAAIA,KAAK,YAAYX,YAAY,EAAEY,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IACnE,CAAC,EACAC,GAAG,IAAI;MACN,IAAIA,GAAG,YAAYf,iBAAiB,EAAE;QACpC,IAAIe,GAAG,CAACC,MAAM,IAAI,GAAG,EAAEH,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;IAEtD,CAAC,CACF,CACF;EACH;;AAtBWX,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAc,SAAtBd,sBAAsB;AAAA","names":["HttpErrorResponse","HttpResponse","tap","AuthInterceptorService","constructor","intercept","req","next","authReq","clone","handle","pipe","event","console","log","err","status","factory"],"sourceRoot":"","sources":["D:\\projects\\grocery-delivery-app\\client\\src\\shared\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from \"@angular/common/http\";\nimport { Observable, tap } from \"rxjs\";\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor() {}\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const authReq = req.clone({\n      // headers: req.headers.set(\"Session\", \"123456789\"),\n    });\n\n    return next.handle(authReq).pipe(\n      tap(\n        (event) => {\n          if (event instanceof HttpResponse) console.log(\"Server response\");\n        },\n        (err) => {\n          if (err instanceof HttpErrorResponse) {\n            if (err.status == 401) console.log(\"Unauthorized\");\n          }\n        }\n      )\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}